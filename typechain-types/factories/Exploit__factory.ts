/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Exploit, ExploitInterface } from "../Exploit";

const _abi = [
  {
    inputs: [],
    name: "determineGuess",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052738038816b5d233282ff19a26e9aa0105fd9a619716000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f800000000000000000000000000000000000000000000000000000000000000060015534801561008857600080fd5b506101ab806100986000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063345cff3314610030575b600080fd5b61003861004e565b6040516100459190610097565b60405180910390f35b60008060014361005e91906100e1565b4060001c90506000600154826100749190610144565b9050809250505090565b6000819050919050565b6100918161007e565b82525050565b60006020820190506100ac6000830184610088565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006100ec8261007e565b91506100f78361007e565b92508282101561010a576101096100b2565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061014f8261007e565b915061015a8361007e565b92508261016a57610169610115565b5b82820490509291505056fea2646970667358221220de6b9e7bbe28033dbef389123073320a10048e5ecd2ec12846d77943370a675d64736f6c63430008090033";

type ExploitConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExploitConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Exploit__factory extends ContractFactory {
  constructor(...args: ExploitConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Exploit> {
    return super.deploy(overrides || {}) as Promise<Exploit>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Exploit {
    return super.attach(address) as Exploit;
  }
  override connect(signer: Signer): Exploit__factory {
    return super.connect(signer) as Exploit__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExploitInterface {
    return new utils.Interface(_abi) as ExploitInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Exploit {
    return new Contract(address, _abi, signerOrProvider) as Exploit;
  }
}
